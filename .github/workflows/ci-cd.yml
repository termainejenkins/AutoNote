name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, note-service, content-service, ai-service]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd services/${{ matrix.service }}
        pytest --cov=app tests/
    
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        directory: ./services/${{ matrix.service }}

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, note-service, content-service, ai-service]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run linters
      run: |
        cd services/${{ matrix.service }}
        flake8 app tests
        black --check app tests
        isort --check-only app tests

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Run security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push services
      uses: docker/build-push-action@v2
      with:
        context: ./services/api-gateway
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/autonote-api-gateway:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autonote-api-gateway:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autonote-api-gateway:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/autonote
          docker-compose pull
          docker-compose up -d 